<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Yozen Hernandez</title>
    <link>https://yzhernand.github.io/</link>
    <description>Recent content on Yozen Hernandez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Jul 2019 23:44:35 -0400</lastBuildDate>
    
	<atom:link href="https://yzhernand.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Perl Weekly Challenge 15, Part 2: Encrypting/Decrypting With the Vigenère Cipher</title>
      <link>https://yzhernand.github.io/posts/perl-weekly-challenge-15-part2/</link>
      <pubDate>Thu, 04 Jul 2019 23:44:35 -0400</pubDate>
      
      <guid>https://yzhernand.github.io/posts/perl-weekly-challenge-15-part2/</guid>
      <description>Welcome to the second part of my posts on this week&amp;rsquo;s Perl Weekly Challenge. You can find the first part of this post on either dev.to or my personal blog.
Challenge 2  Write a script to implement Vigenère cipher. The script should be able encode and decode. Checkout wiki page for more information.
 This seemed like a cool challenge to tackle. Knowing next to nothing about encryption, I was worried that this would take me all week.</description>
    </item>
    
    <item>
      <title>Perl Weekly Challenge 15, Part 1: Finding Strong and Weak Primes with Perl</title>
      <link>https://yzhernand.github.io/posts/perl-weekly-challenge-15/</link>
      <pubDate>Mon, 01 Jul 2019 14:45:21 -0400</pubDate>
      
      <guid>https://yzhernand.github.io/posts/perl-weekly-challenge-15/</guid>
      <description>This week&amp;rsquo;s Perl Weekly Challenge touched on prime number sequences again, and some old-school cryptography (which was pretty exciting). This post is divided into two parts, one for each challenge. Find part 2 on dev.to or my blog on Github Pages.
Challenge 1  Write a script to generate first 10 strong and weak prime numbers. For example, the *n*th prime number is represented by p(n).
p(1) = 2 p(2) = 3 p(3) = 5 p(4) = 7 p(5) = 11</description>
    </item>
    
    <item>
      <title>Perl Weekly Challenge 14: van Eck’s sequence / Adventures in overthinking- making words from US state initials</title>
      <link>https://yzhernand.github.io/posts/perl-weekly-challenge-14/</link>
      <pubDate>Sun, 30 Jun 2019 12:01:08 -0400</pubDate>
      
      <guid>https://yzhernand.github.io/posts/perl-weekly-challenge-14/</guid>
      <description>Warning This post ended up being pretty long. A million thanks if you make it through to the end.
This week&amp;rsquo;s Perl Weekly Challenge offered two very nice challenges that I really had to think about. Later in the week, Neil Bowers, who is credited with suggesting the second challenge, posted about an additional challenge since his submission was misunderstood.
Now with that out of the way, let me walk you through how I approached these challenges.</description>
    </item>
    
    <item>
      <title>Perl Weekly Challenge 13: Last Friday of the month / Mutually recursive methods</title>
      <link>https://yzhernand.github.io/posts/perl-weekly-challenge-13/</link>
      <pubDate>Fri, 21 Jun 2019 10:26:18 -0400</pubDate>
      
      <guid>https://yzhernand.github.io/posts/perl-weekly-challenge-13/</guid>
      <description>Note: I&amp;rsquo;ve also posted this over on dev.to in case anyone wanted to leave any comments there.
This week&amp;rsquo;s Perl Weekly Challenge had two fairly fun challenges, and a 3rd API challenge that unfortunately needed an additional step I wasn&amp;rsquo;t willing to take to participate in (the website required credit card details to use their API at any level).
Challenge 1  Write a script to print the date of last Friday of every month of a given year.</description>
    </item>
    
    <item>
      <title>Perl Weekly Challenge 12: Euclid Numbers and Common Paths</title>
      <link>https://yzhernand.github.io/posts/perl-weekly-challenge-12/</link>
      <pubDate>Mon, 10 Jun 2019 13:51:38 -0400</pubDate>
      
      <guid>https://yzhernand.github.io/posts/perl-weekly-challenge-12/</guid>
      <description>Fun challenges this week! But first: I&amp;rsquo;m honored to be mentioned in the Perl Weekly Newsletter for the second time now. I&amp;rsquo;m especially honored by the very flattering notion that I&amp;rsquo;m somehow becoming popular with these posts. It&amp;rsquo;s enouraging me to make some time to write about things beyond just these challenges.
Challenge 1  The numbers formed by adding one to the products of the smallest primes are called the Euclid Numbers (see wiki).</description>
    </item>
    
    <item>
      <title>Perl Weekly Challenge 11: Temperature Scales And Identity Matrices</title>
      <link>https://yzhernand.github.io/posts/perl-weekly-challenge-11/</link>
      <pubDate>Wed, 05 Jun 2019 11:20:22 -0400</pubDate>
      
      <guid>https://yzhernand.github.io/posts/perl-weekly-challenge-11/</guid>
      <description>Another Perl Weekly Challenge. I found this week&amp;rsquo;s challenges easier than last week&amp;rsquo;s, which is not bad as I don&amp;rsquo;t necessarily want to stress out over something that is meant to be a learning experience and to keep my skills up.
Challenge 1  Write a script that computes the equal point in the Fahrenheit and Celsius scales, knowing that the freezing point of water is 32 °F and 0 °C, and that the boiling point of water is 212 °F and 100 °C.</description>
    </item>
    
    <item>
      <title>Perl Weekly Challenge 10: Roman numerals and Jaro-Winkler distance</title>
      <link>https://yzhernand.github.io/posts/perl-weekly-challenge-10/</link>
      <pubDate>Sun, 02 Jun 2019 13:49:47 -0400</pubDate>
      
      <guid>https://yzhernand.github.io/posts/perl-weekly-challenge-10/</guid>
      <description>Back at it again with another week of the Perl Weekly Challenge. This time for challenge #10
Challenge #1  Write a script to encode/decode Roman numerals. For example, given Roman numeral CCXLVI, it should return 246. Similarly, for decimal number 39, it should return XXXIX.
 I made the following assumptions for this challenge:
 Valid Roman Numerals follow the &amp;ldquo;Subtractive notation&amp;rdquo; convention mentioned on the Wikipedia page. Only one leading subtractive character is allowed (eg, &amp;lsquo;VIII&amp;rsquo; for &amp;lsquo;8&amp;rsquo;, but not &amp;lsquo;IIX&amp;rsquo;).</description>
    </item>
    
    <item>
      <title>Perl Weekly Challenge 9</title>
      <link>https://yzhernand.github.io/posts/perl-weekly-challenge-9/</link>
      <pubDate>Tue, 21 May 2019 09:25:05 -0400</pubDate>
      
      <guid>https://yzhernand.github.io/posts/perl-weekly-challenge-9/</guid>
      <description>This will be my first ever blog post ever. Hi there!
I decided to blog a bit so that I can write about the process that goes into solving the Perl Weekly Challenge that I recently heard about. I love Perl, challenging myself with programming tasks, and procrastination. It all works out!
So this post will deal with the 9th challenge so far. Check out this challenge, as well as the Perl Weekly Challenge page, here.</description>
    </item>
    
  </channel>
</rss>